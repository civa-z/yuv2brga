/***************************************************************************
 *
 * Copyright (c) 2019 Baidu.com, Inc. All Rights Reserved
 *
 **************************************************************************/

/*
 * zhangwenming02
 * 20190715
 * */

#include <iostream>
#include <arm_neon.h>
#include "yuv2bgr_with_convert.h"

G_NAMESPACE1_BEGIN(g_sdk_namespace)

int Y_TABLE[256] = {
    0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,
    0 ,  298 ,  596 ,  894 ,  1192 ,  1490 ,  1788 ,  2086 ,  2384 ,  2682 ,  2980 ,  3278 ,  3576 ,  3874 ,  4172 ,  4470 ,
    4768 ,  5066 ,  5364 ,  5662 ,  5960 ,  6258 ,  6556 ,  6854 ,  7152 ,  7450 ,  7748 ,  8046 ,  8344 ,  8642 ,  8940 ,  9238 ,
    9536 ,  9834 ,  10132 ,  10430 ,  10728 ,  11026 ,  11324 ,  11622 ,  11920 ,  12218 ,  12516 ,  12814 ,  13112 ,  13410 ,  13708 ,  14006 ,
    14304 ,  14602 ,  14900 ,  15198 ,  15496 ,  15794 ,  16092 ,  16390 ,  16688 ,  16986 ,  17284 ,  17582 ,  17880 ,  18178 ,  18476 ,  18774 ,
    19072 ,  19370 ,  19668 ,  19966 ,  20264 ,  20562 ,  20860 ,  21158 ,  21456 ,  21754 ,  22052 ,  22350 ,  22648 ,  22946 ,  23244 ,  23542 ,
    23840 ,  24138 ,  24436 ,  24734 ,  25032 ,  25330 ,  25628 ,  25926 ,  26224 ,  26522 ,  26820 ,  27118 ,  27416 ,  27714 ,  28012 ,  28310 ,
    28608 ,  28906 ,  29204 ,  29502 ,  29800 ,  30098 ,  30396 ,  30694 ,  30992 ,  31290 ,  31588 ,  31886 ,  32184 ,  32482 ,  32780 ,  33078 ,
    33376 ,  33674 ,  33972 ,  34270 ,  34568 ,  34866 ,  35164 ,  35462 ,  35760 ,  36058 ,  36356 ,  36654 ,  36952 ,  37250 ,  37548 ,  37846 ,
    38144 ,  38442 ,  38740 ,  39038 ,  39336 ,  39634 ,  39932 ,  40230 ,  40528 ,  40826 ,  41124 ,  41422 ,  41720 ,  42018 ,  42316 ,  42614 ,
    42912 ,  43210 ,  43508 ,  43806 ,  44104 ,  44402 ,  44700 ,  44998 ,  45296 ,  45594 ,  45892 ,  46190 ,  46488 ,  46786 ,  47084 ,  47382 ,
    47680 ,  47978 ,  48276 ,  48574 ,  48872 ,  49170 ,  49468 ,  49766 ,  50064 ,  50362 ,  50660 ,  50958 ,  51256 ,  51554 ,  51852 ,  52150 ,
    52448 ,  52746 ,  53044 ,  53342 ,  53640 ,  53938 ,  54236 ,  54534 ,  54832 ,  55130 ,  55428 ,  55726 ,  56024 ,  56322 ,  56620 ,  56918 ,
    57216 ,  57514 ,  57812 ,  58110 ,  58408 ,  58706 ,  59004 ,  59302 ,  59600 ,  59898 ,  60196 ,  60494 ,  60792 ,  61090 ,  61388 ,  61686 ,
    61984 ,  62282 ,  62580 ,  62878 ,  63176 ,  63474 ,  63772 ,  64070 ,  64368 ,  64666 ,  64964 ,  65262 ,  65560 ,  65858 ,  66156 ,  66454 ,
    66752 ,  67050 ,  67348 ,  67646 ,  67944 ,  68242 ,  68540 ,  68838 ,  69136 ,  69434 ,  69732 ,  70030 ,  70328 ,  70626 ,  70924 ,  71222 ,
};

int BU_TABLE[256] = {
    -52352 ,  -51943 ,  -51534 ,  -51125 ,  -50716 ,  -50307 ,  -49898 ,  -49489 ,  -49080 ,  -48671 ,  -48262 ,  -47853 ,  -47444 ,  -47035 ,  -46626 ,  -46217 ,
    -45808 ,  -45399 ,  -44990 ,  -44581 ,  -44172 ,  -43763 ,  -43354 ,  -42945 ,  -42536 ,  -42127 ,  -41718 ,  -41309 ,  -40900 ,  -40491 ,  -40082 ,  -39673 ,
    -39264 ,  -38855 ,  -38446 ,  -38037 ,  -37628 ,  -37219 ,  -36810 ,  -36401 ,  -35992 ,  -35583 ,  -35174 ,  -34765 ,  -34356 ,  -33947 ,  -33538 ,  -33129 ,
    -32720 ,  -32311 ,  -31902 ,  -31493 ,  -31084 ,  -30675 ,  -30266 ,  -29857 ,  -29448 ,  -29039 ,  -28630 ,  -28221 ,  -27812 ,  -27403 ,  -26994 ,  -26585 ,
    -26176 ,  -25767 ,  -25358 ,  -24949 ,  -24540 ,  -24131 ,  -23722 ,  -23313 ,  -22904 ,  -22495 ,  -22086 ,  -21677 ,  -21268 ,  -20859 ,  -20450 ,  -20041 ,
    -19632 ,  -19223 ,  -18814 ,  -18405 ,  -17996 ,  -17587 ,  -17178 ,  -16769 ,  -16360 ,  -15951 ,  -15542 ,  -15133 ,  -14724 ,  -14315 ,  -13906 ,  -13497 ,
    -13088 ,  -12679 ,  -12270 ,  -11861 ,  -11452 ,  -11043 ,  -10634 ,  -10225 ,  -9816 ,  -9407 ,  -8998 ,  -8589 ,  -8180 ,  -7771 ,  -7362 ,  -6953 ,
    -6544 ,  -6135 ,  -5726 ,  -5317 ,  -4908 ,  -4499 ,  -4090 ,  -3681 ,  -3272 ,  -2863 ,  -2454 ,  -2045 ,  -1636 ,  -1227 ,  -818 ,  -409 ,
    0 ,  409 ,  818 ,  1227 ,  1636 ,  2045 ,  2454 ,  2863 ,  3272 ,  3681 ,  4090 ,  4499 ,  4908 ,  5317 ,  5726 ,  6135 ,
    6544 ,  6953 ,  7362 ,  7771 ,  8180 ,  8589 ,  8998 ,  9407 ,  9816 ,  10225 ,  10634 ,  11043 ,  11452 ,  11861 ,  12270 ,  12679 ,
    13088 ,  13497 ,  13906 ,  14315 ,  14724 ,  15133 ,  15542 ,  15951 ,  16360 ,  16769 ,  17178 ,  17587 ,  17996 ,  18405 ,  18814 ,  19223 ,
    19632 ,  20041 ,  20450 ,  20859 ,  21268 ,  21677 ,  22086 ,  22495 ,  22904 ,  23313 ,  23722 ,  24131 ,  24540 ,  24949 ,  25358 ,  25767 ,
    26176 ,  26585 ,  26994 ,  27403 ,  27812 ,  28221 ,  28630 ,  29039 ,  29448 ,  29857 ,  30266 ,  30675 ,  31084 ,  31493 ,  31902 ,  32311 ,
    32720 ,  33129 ,  33538 ,  33947 ,  34356 ,  34765 ,  35174 ,  35583 ,  35992 ,  36401 ,  36810 ,  37219 ,  37628 ,  38037 ,  38446 ,  38855 ,
    39264 ,  39673 ,  40082 ,  40491 ,  40900 ,  41309 ,  41718 ,  42127 ,  42536 ,  42945 ,  43354 ,  43763 ,  44172 ,  44581 ,  44990 ,  45399 ,
    45808 ,  46217 ,  46626 ,  47035 ,  47444 ,  47853 ,  48262 ,  48671 ,  49080 ,  49489 ,  49898 ,  50307 ,  50716 ,  51125 ,  51534 ,  51943 ,
};

int GV_TABLE[256] = {
    26624 ,  26416 ,  26208 ,  26000 ,  25792 ,  25584 ,  25376 ,  25168 ,  24960 ,  24752 ,  24544 ,  24336 ,  24128 ,  23920 ,  23712 ,  23504 ,
    23296 ,  23088 ,  22880 ,  22672 ,  22464 ,  22256 ,  22048 ,  21840 ,  21632 ,  21424 ,  21216 ,  21008 ,  20800 ,  20592 ,  20384 ,  20176 ,
    19968 ,  19760 ,  19552 ,  19344 ,  19136 ,  18928 ,  18720 ,  18512 ,  18304 ,  18096 ,  17888 ,  17680 ,  17472 ,  17264 ,  17056 ,  16848 ,
    16640 ,  16432 ,  16224 ,  16016 ,  15808 ,  15600 ,  15392 ,  15184 ,  14976 ,  14768 ,  14560 ,  14352 ,  14144 ,  13936 ,  13728 ,  13520 ,
    13312 ,  13104 ,  12896 ,  12688 ,  12480 ,  12272 ,  12064 ,  11856 ,  11648 ,  11440 ,  11232 ,  11024 ,  10816 ,  10608 ,  10400 ,  10192 ,
    9984 ,  9776 ,  9568 ,  9360 ,  9152 ,  8944 ,  8736 ,  8528 ,  8320 ,  8112 ,  7904 ,  7696 ,  7488 ,  7280 ,  7072 ,  6864 ,
    6656 ,  6448 ,  6240 ,  6032 ,  5824 ,  5616 ,  5408 ,  5200 ,  4992 ,  4784 ,  4576 ,  4368 ,  4160 ,  3952 ,  3744 ,  3536 ,
    3328 ,  3120 ,  2912 ,  2704 ,  2496 ,  2288 ,  2080 ,  1872 ,  1664 ,  1456 ,  1248 ,  1040 ,  832 ,  624 ,  416 ,  208 ,
    0 ,  -208 ,  -416 ,  -624 ,  -832 ,  -1040 ,  -1248 ,  -1456 ,  -1664 ,  -1872 ,  -2080 ,  -2288 ,  -2496 ,  -2704 ,  -2912 ,  -3120 ,
    -3328 ,  -3536 ,  -3744 ,  -3952 ,  -4160 ,  -4368 ,  -4576 ,  -4784 ,  -4992 ,  -5200 ,  -5408 ,  -5616 ,  -5824 ,  -6032 ,  -6240 ,  -6448 ,
    -6656 ,  -6864 ,  -7072 ,  -7280 ,  -7488 ,  -7696 ,  -7904 ,  -8112 ,  -8320 ,  -8528 ,  -8736 ,  -8944 ,  -9152 ,  -9360 ,  -9568 ,  -9776 ,
    -9984 ,  -10192 ,  -10400 ,  -10608 ,  -10816 ,  -11024 ,  -11232 ,  -11440 ,  -11648 ,  -11856 ,  -12064 ,  -12272 ,  -12480 ,  -12688 ,  -12896 ,  -13104 ,
    -13312 ,  -13520 ,  -13728 ,  -13936 ,  -14144 ,  -14352 ,  -14560 ,  -14768 ,  -14976 ,  -15184 ,  -15392 ,  -15600 ,  -15808 ,  -16016 ,  -16224 ,  -16432 ,
    -16640 ,  -16848 ,  -17056 ,  -17264 ,  -17472 ,  -17680 ,  -17888 ,  -18096 ,  -18304 ,  -18512 ,  -18720 ,  -18928 ,  -19136 ,  -19344 ,  -19552 ,  -19760 ,
    -19968 ,  -20176 ,  -20384 ,  -20592 ,  -20800 ,  -21008 ,  -21216 ,  -21424 ,  -21632 ,  -21840 ,  -22048 ,  -22256 ,  -22464 ,  -22672 ,  -22880 ,  -23088 ,
    -23296 ,  -23504 ,  -23712 ,  -23920 ,  -24128 ,  -24336 ,  -24544 ,  -24752 ,  -24960 ,  -25168 ,  -25376 ,  -25584 ,  -25792 ,  -26000 ,  -26208 ,  -26416 ,
};

int GU_TABLE[256] = {
    12800 ,  12700 ,  12600 ,  12500 ,  12400 ,  12300 ,  12200 ,  12100 ,  12000 ,  11900 ,  11800 ,  11700 ,  11600 ,  11500 ,  11400 ,  11300 ,
    11200 ,  11100 ,  11000 ,  10900 ,  10800 ,  10700 ,  10600 ,  10500 ,  10400 ,  10300 ,  10200 ,  10100 ,  10000 ,  9900 ,  9800 ,  9700 ,
    9600 ,  9500 ,  9400 ,  9300 ,  9200 ,  9100 ,  9000 ,  8900 ,  8800 ,  8700 ,  8600 ,  8500 ,  8400 ,  8300 ,  8200 ,  8100 ,
    8000 ,  7900 ,  7800 ,  7700 ,  7600 ,  7500 ,  7400 ,  7300 ,  7200 ,  7100 ,  7000 ,  6900 ,  6800 ,  6700 ,  6600 ,  6500 ,
    6400 ,  6300 ,  6200 ,  6100 ,  6000 ,  5900 ,  5800 ,  5700 ,  5600 ,  5500 ,  5400 ,  5300 ,  5200 ,  5100 ,  5000 ,  4900 ,
    4800 ,  4700 ,  4600 ,  4500 ,  4400 ,  4300 ,  4200 ,  4100 ,  4000 ,  3900 ,  3800 ,  3700 ,  3600 ,  3500 ,  3400 ,  3300 ,
    3200 ,  3100 ,  3000 ,  2900 ,  2800 ,  2700 ,  2600 ,  2500 ,  2400 ,  2300 ,  2200 ,  2100 ,  2000 ,  1900 ,  1800 ,  1700 ,
    1600 ,  1500 ,  1400 ,  1300 ,  1200 ,  1100 ,  1000 ,  900 ,  800 ,  700 ,  600 ,  500 ,  400 ,  300 ,  200 ,  100 ,
    0 ,  -100 ,  -200 ,  -300 ,  -400 ,  -500 ,  -600 ,  -700 ,  -800 ,  -900 ,  -1000 ,  -1100 ,  -1200 ,  -1300 ,  -1400 ,  -1500 ,
    -1600 ,  -1700 ,  -1800 ,  -1900 ,  -2000 ,  -2100 ,  -2200 ,  -2300 ,  -2400 ,  -2500 ,  -2600 ,  -2700 ,  -2800 ,  -2900 ,  -3000 ,  -3100 ,
    -3200 ,  -3300 ,  -3400 ,  -3500 ,  -3600 ,  -3700 ,  -3800 ,  -3900 ,  -4000 ,  -4100 ,  -4200 ,  -4300 ,  -4400 ,  -4500 ,  -4600 ,  -4700 ,
    -4800 ,  -4900 ,  -5000 ,  -5100 ,  -5200 ,  -5300 ,  -5400 ,  -5500 ,  -5600 ,  -5700 ,  -5800 ,  -5900 ,  -6000 ,  -6100 ,  -6200 ,  -6300 ,
    -6400 ,  -6500 ,  -6600 ,  -6700 ,  -6800 ,  -6900 ,  -7000 ,  -7100 ,  -7200 ,  -7300 ,  -7400 ,  -7500 ,  -7600 ,  -7700 ,  -7800 ,  -7900 ,
    -8000 ,  -8100 ,  -8200 ,  -8300 ,  -8400 ,  -8500 ,  -8600 ,  -8700 ,  -8800 ,  -8900 ,  -9000 ,  -9100 ,  -9200 ,  -9300 ,  -9400 ,  -9500 ,
    -9600 ,  -9700 ,  -9800 ,  -9900 ,  -10000 ,  -10100 ,  -10200 ,  -10300 ,  -10400 ,  -10500 ,  -10600 ,  -10700 ,  -10800 ,  -10900 ,  -11000 ,  -11100 ,
    -11200 ,  -11300 ,  -11400 ,  -11500 ,  -11600 ,  -11700 ,  -11800 ,  -11900 ,  -12000 ,  -12100 ,  -12200 ,  -12300 ,  -12400 ,  -12500 ,  -12600 ,  -12700 ,
};

int RV_TABLE[256] = {
    -26752 ,  -26543 ,  -26334 ,  -26125 ,  -25916 ,  -25707 ,  -25498 ,  -25289 ,  -25080 ,  -24871 ,  -24662 ,  -24453 ,  -24244 ,  -24035 ,  -23826 ,  -23617 ,
    -23408 ,  -23199 ,  -22990 ,  -22781 ,  -22572 ,  -22363 ,  -22154 ,  -21945 ,  -21736 ,  -21527 ,  -21318 ,  -21109 ,  -20900 ,  -20691 ,  -20482 ,  -20273 ,
    -20064 ,  -19855 ,  -19646 ,  -19437 ,  -19228 ,  -19019 ,  -18810 ,  -18601 ,  -18392 ,  -18183 ,  -17974 ,  -17765 ,  -17556 ,  -17347 ,  -17138 ,  -16929 ,
    -16720 ,  -16511 ,  -16302 ,  -16093 ,  -15884 ,  -15675 ,  -15466 ,  -15257 ,  -15048 ,  -14839 ,  -14630 ,  -14421 ,  -14212 ,  -14003 ,  -13794 ,  -13585 ,
    -13376 ,  -13167 ,  -12958 ,  -12749 ,  -12540 ,  -12331 ,  -12122 ,  -11913 ,  -11704 ,  -11495 ,  -11286 ,  -11077 ,  -10868 ,  -10659 ,  -10450 ,  -10241 ,
    -10032 ,  -9823 ,  -9614 ,  -9405 ,  -9196 ,  -8987 ,  -8778 ,  -8569 ,  -8360 ,  -8151 ,  -7942 ,  -7733 ,  -7524 ,  -7315 ,  -7106 ,  -6897 ,
    -6688 ,  -6479 ,  -6270 ,  -6061 ,  -5852 ,  -5643 ,  -5434 ,  -5225 ,  -5016 ,  -4807 ,  -4598 ,  -4389 ,  -4180 ,  -3971 ,  -3762 ,  -3553 ,
    -3344 ,  -3135 ,  -2926 ,  -2717 ,  -2508 ,  -2299 ,  -2090 ,  -1881 ,  -1672 ,  -1463 ,  -1254 ,  -1045 ,  -836 ,  -627 ,  -418 ,  -209 ,
    0 ,  209 ,  418 ,  627 ,  836 ,  1045 ,  1254 ,  1463 ,  1672 ,  1881 ,  2090 ,  2299 ,  2508 ,  2717 ,  2926 ,  3135 ,
    3344 ,  3553 ,  3762 ,  3971 ,  4180 ,  4389 ,  4598 ,  4807 ,  5016 ,  5225 ,  5434 ,  5643 ,  5852 ,  6061 ,  6270 ,  6479 ,
    6688 ,  6897 ,  7106 ,  7315 ,  7524 ,  7733 ,  7942 ,  8151 ,  8360 ,  8569 ,  8778 ,  8987 ,  9196 ,  9405 ,  9614 ,  9823 ,
    10032 ,  10241 ,  10450 ,  10659 ,  10868 ,  11077 ,  11286 ,  11495 ,  11704 ,  11913 ,  12122 ,  12331 ,  12540 ,  12749 ,  12958 ,  13167 ,
    13376 ,  13585 ,  13794 ,  14003 ,  14212 ,  14421 ,  14630 ,  14839 ,  15048 ,  15257 ,  15466 ,  15675 ,  15884 ,  16093 ,  16302 ,  16511 ,
    16720 ,  16929 ,  17138 ,  17347 ,  17556 ,  17765 ,  17974 ,  18183 ,  18392 ,  18601 ,  18810 ,  19019 ,  19228 ,  19437 ,  19646 ,  19855 ,
    20064 ,  20273 ,  20482 ,  20691 ,  20900 ,  21109 ,  21318 ,  21527 ,  21736 ,  21945 ,  22154 ,  22363 ,  22572 ,  22781 ,  22990 ,  23199 ,
    23408 ,  23617 ,  23826 ,  24035 ,  24244 ,  24453 ,  24662 ,  24871 ,  25080 ,  25289 ,  25498 ,  25707 ,  25916 ,  26125 ,  26334 ,  26543 ,
};

void store_pixel(unsigned char* dst, int iR,int iG, int iB) {
#if 1
    *dst++ = iB;
    *dst++ = iG;
    *dst =   iR;
#else
    *dst++ = (iR>0) ? (iR<65535 ? (unsigned char)(iR>>8):0xff):0;
    *dst++ = (iG>0) ? (iG<65535 ? (unsigned char)(iG>>8):0xff):0;
    *dst = (iB>0) ? (iB<65535 ? (unsigned char)(iB>>8):0xff):0;
#endif
}

template<typename ratate_mirror>
bool decode_yuv(ConvertParameter* con_param, unsigned char alpha=0xff)
{
    unsigned int   height = con_param->img_in.rows;
    unsigned int   width = con_param->img_in.cols;
    unsigned char* data_in = con_param->img_in.data;
    unsigned char* data_out = con_param->img_out.data;
    
    if (0!=(width&3) || width<4 ||
        0!=(height&3) || height<4 ||
        !data_in || !data_out) {
        return false;
    }
    
    int const halfHeight = height>>1;
    int const halfWidth = width>>1;
    ratate_mirror r_m(height, width, con_param->img_out.channels);
    
    unsigned char const* y0 = data_in;
    unsigned char const* y1 = y0 + width;
    unsigned char const* uv = data_in + (width*height);
    
    unsigned char* dst_this = data_out + r_m.start_shift;
    unsigned char* dst_this_0 = dst_this;
    unsigned char* dst_this_1 = dst_this_0 + r_m.row_step;
    
    int Y[4], R[4], G[4], B[4], UV[4];
    int* UV0 = UV; int *UV1 = UV+1;  int *UV2 = UV+2;  int *UV3 = UV+3;
    
    int oefficient[4] = {409, -100, -208, 516};
    
    int32x4_t int32x4_t_UV;
    int32x4_t int32x4_t_oefficient = vld1q_s32(oefficient);
    int32x4_t int32x4_t_16 = vdupq_n_s32(16);
    int32x4_t int32x4_t_298 = vdupq_n_s32(298);
    int32x4_t int32x4_t_0 = vdupq_n_s32(0);
    int32x4_t int32x4_t_128 = vdupq_n_s32(128);
    int32x4_t int32x4_t_65535 = vdupq_n_s32(65535);
#if 0
    int Y00, Y01, Y10, Y11;
    int V, U;
    int tR, tG, tB;
#endif
    
    for (int h=0; h<halfHeight; ++h) {
        for (int w=0; w<halfWidth; ++w) {
#if 1
            Y[0] = *y0++; Y[1] = *y0++;
            Y[2] = *y1++; Y[3] = *y1++;
            *UV2 = *UV0 = *uv++;
            *UV3 = *UV1 = *uv++;
            int32x4_t int32x4_t_Y = vld1q_s32(Y);
            int32x4_t_Y = vsubq_u32(int32x4_t_Y, int32x4_t_16);
            int32x4_t_Y = vmulq_s32(int32x4_t_Y, int32x4_t_298);
            
            
            int32x4_t_UV = vld1q_s32(UV);
            int32x4_t_UV = vsubq_s32(int32x4_t_UV, int32x4_t_128);
            int32x4_t_UV = vmulq_s32(int32x4_t_UV, int32x4_t_oefficient);
            vst1q_s32(UV, int32x4_t_UV);
            
            int32x4_t int32x4_t_RGB = vaddq_s32(int32x4_t_Y, vdupq_n_s32(*UV0));
            int32x4_t_RGB = vmaxq_s32(int32x4_t_RGB, int32x4_t_0);
            int32x4_t_RGB = vminq_s32(int32x4_t_RGB, int32x4_t_65535);
            int32x4_t_RGB = vshrq_n_s32(int32x4_t_RGB, 8);
            vst1q_s32(R, int32x4_t_RGB);
            
            int32x4_t_RGB = vaddq_s32(int32x4_t_Y, vdupq_n_s32(*UV1 + *UV2));
            int32x4_t_RGB = vmaxq_s32(int32x4_t_RGB, int32x4_t_0);
            int32x4_t_RGB = vminq_s32(int32x4_t_RGB, int32x4_t_65535);
            int32x4_t_RGB = vshrq_n_s32(int32x4_t_RGB, 8);
            vst1q_s32(G, int32x4_t_RGB);
            
            int32x4_t_RGB = vaddq_s32(int32x4_t_Y, vdupq_n_s32(*UV3));
            int32x4_t_RGB = vmaxq_s32(int32x4_t_RGB, int32x4_t_0);
            int32x4_t_RGB = vminq_s32(int32x4_t_RGB, int32x4_t_65535);
            int32x4_t_RGB = vshrq_n_s32(int32x4_t_RGB, 8);
            vst1q_s32(B, int32x4_t_RGB);
            
            // 2x2 pixels result
            store_pixel(dst_this_0, R[0], G[0], B[0]);
            dst_this_0 += r_m.col_step;
            store_pixel(dst_this_0, R[1], G[1], B[1]);
            dst_this_0 += r_m.col_step;
            store_pixel(dst_this_1, R[2], G[2], B[2]);
            dst_this_1 += r_m.col_step;
            store_pixel(dst_this_1, R[3], G[3], B[3]);
            dst_this_1 += r_m.col_step;
#else
            Y00 = *y0++;  Y01 = *y0++;
            Y10 = *y1++;  Y11 = *y1++;
            Y00 = 298*Y00;
            Y01 = 298*Y01;
            Y10 = 298*Y10;
            Y11 = 298*Y11;
            
            V=*uv++; U=*uv++;
            tR = 409*V - 57120;
            tG = 34565 - 100*U - 208*V;
            tB = 516*U - 70816;
            store_pixel(dst_this_0, Y00+tR, Y00+tG, Y00+tB);
            dst_this_0 += r_m.col_step;
            store_pixel(dst_this_0, Y01+tR, Y01+tG, Y01+tB);
            dst_this_0 += r_m.col_step;
            store_pixel(dst_this_1, Y10+tR, Y10+tG, Y10+tB);
            dst_this_1 += r_m.col_step;
            store_pixel(dst_this_1, Y11+tR, Y11+tG, Y11+tB);
            dst_this_1 += r_m.col_step;
            
#endif
        }
        
        y0 = y1;
        y1 = y0+width;
        
        dst_this += r_m.row_step<<1;
        dst_this_0 = dst_this;
        dst_this_1 = dst_this_0 + r_m.row_step;
    }
    return true;
}

class Rotate0 {
public:
    Rotate0(int rows, int cols, int channels) :
    start_shift(0),
    row_step(cols * channels),
    col_step(channels){ }
    
    const int start_shift;
    const int row_step;
    const int col_step;
};

class Rotate0Mirror {
public:
    Rotate0Mirror(int rows, int cols, int channels) :
    start_shift((cols - 1) * channels),
    row_step(cols * channels),
    col_step(-channels){ }
    
    const int start_shift;
    const int row_step;
    const int col_step;
};

class Rotate90 {
public:
    Rotate90(int rows, int cols, int channels) :
    start_shift((rows - 1) * channels),
    row_step(-channels),
    col_step(rows * channels) { }
    
    const int start_shift;
    const int row_step;
    const int col_step;
};

class Rotate90Mirror {
public:
    Rotate90Mirror(int rows, int cols, int channels) :
    start_shift(0),
    row_step(channels),
    col_step(rows * channels) { }
    
    const int start_shift;
    const int row_step;
    const int col_step;
};

class Rotate180 {
public:
    Rotate180(int rows, int cols, int channels) :
    start_shift((rows * cols - 1) * channels),
    row_step(-cols * channels),
    col_step(-channels) { }
    
    const int start_shift;
    const int row_step;
    const int col_step;
};

class Rotate180Mirror {
public:
    Rotate180Mirror(int rows, int cols, int channels) :
    start_shift(((rows - 1) * cols) * channels),
    row_step(-cols * channels),
    col_step(channels) { }
    
    const int start_shift;
    const int row_step;
    const int col_step;
};

class Rotate270 {
public:
    Rotate270(int rows, int cols, int channels) :
    start_shift(rows * (cols - 1) * channels),
    row_step(channels),
    col_step(-rows * channels) { }
    
    const int start_shift;
    const int row_step;
    const int col_step;
};

class Rotate270Mirror {
public:
    Rotate270Mirror(int rows, int cols, int channels) :
    start_shift((rows * cols - 1) * channels),
    row_step(-channels),
    col_step(-rows * channels) { }
    
    const int start_shift;
    const int row_step;
    const int col_step;
};

bool nv21_to_bgr(ConvertParameter* con_param){
    if (NULL == con_param) {
        return false;
    }
    
    switch (con_param->rotate) {
        case 0:
            if (con_param->is_mirror) {
                return decode_yuv<Rotate0Mirror>(con_param);
            }
            else {
                return decode_yuv<Rotate0>(con_param);
            }
        case 90:
            if (con_param->is_mirror) {
                return decode_yuv<Rotate90Mirror>(con_param);
            }
            else {
                return decode_yuv<Rotate90>(con_param);
            }
        case 180:
            if (con_param->is_mirror) {
                return decode_yuv<Rotate180Mirror>(con_param);
            }
            else {
                return decode_yuv<Rotate180>(con_param);
            }
        case 270:
            if (con_param->is_mirror) {
                return decode_yuv<Rotate270Mirror>(con_param);
            }
            else {
                return decode_yuv<Rotate270>(con_param);
            }
        default:
            return false;
    }
}

G_NAMESPACE1_END()
